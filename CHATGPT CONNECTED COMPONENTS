import cv2
import numpy as np
import os

# Directory where images are stored
image_dir = "/content/"
image_count = 25

# Threshold parameters
threshold_value = 50
threshold_type = cv2.THRESH_BINARY_INV

# Result storage
results = []

print("Analyzing SEM Images...\n")
print(f"{'Image':<10} {'Particles':<10} {'Total Area':<12} {'Avg Size':<12} {'Area %':<10}")

for i in range(1, image_count + 1):
    image_path = os.path.join(image_dir, f"{i}.png")
    
    # Load image in grayscale
    img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    if img is None:
        print(f"Image {i}.png not found or could not be opened.")
        continue

    # Thresholding
    _, binary = cv2.threshold(img, threshold_value, 255, threshold_type)

    # Connected components analysis
    num_labels, labels, stats, _ = cv2.connectedComponentsWithStats(binary, connectivity=8)

    # Exclude background (label 0)
    particle_areas = stats[1:, cv2.CC_STAT_AREA]
    num_particles = len(particle_areas)
    total_area = np.sum(particle_areas)
    avg_size = total_area / num_particles if num_particles > 0 else 0
    area_percent = (total_area / (img.shape[0] * img.shape[1])) * 100

    results.append({
        "image": f"{i}.png",
        "particles": num_particles,
        "total_area": total_area,
        "avg_size": avg_size,
        "area_percent": area_percent
    })

    print(f"{i}.png     {num_particles:<10} {total_area:<12} {avg_size:<12.2f} {area_percent:<10.2f}")

# Optional: Save results to CSV
import pandas as pd
df = pd.DataFrame(results)
df.to_csv("/content/sem_analysis_results.csv", index=False)
