import cv2
import numpy as np
import os

# Define constants
IMAGE_DIR = "/content/"
THRESHOLD_VALUE = 50
IMAGE_COUNT = 25

def analyze_sem_images():
    # Initialize results dictionary
    results = {
        "Image": [],
        "Number of Particles": [],
        "Total Area (px²)": [],
        "Average Size (px²)": [],
        "Area %": []
    }
    
    for i in range(1, IMAGE_COUNT + 1):
        # Load image
        img_path = os.path.join(IMAGE_DIR, f"{i}.png")
        if not os.path.exists(img_path):
            print(f"Warning: Image {i}.png not found, skipping...")
            continue
            
        img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
        if img is None:
            print(f"Warning: Could not read image {i}.png, skipping...")
            continue
        
        # Apply binary thresholding (inverted)
        _, binary_img = cv2.threshold(img, THRESHOLD_VALUE, 255, cv2.THRESH_BINARY_INV)
        
        # Perform connected components analysis
        num_labels, labels, stats, centroids = cv2.connectedComponentsWithStats(binary_img, connectivity=8)
        
        # Exclude background (label 0)
        if num_labels > 1:
            particle_stats = stats[1:]  # Skip background
            total_area = np.sum(particle_stats[:, cv2.CC_STAT_AREA])
            avg_size = total_area / (num_labels - 1)
            area_percentage = (total_area / (img.shape[0] * img.shape[1])) * 100
        else:
            total_area = 0
            avg_size = 0
            area_percentage = 0
        
        # Store results
        results["Image"].append(f"{i}.png")
        results["Number of Particles"].append(num_labels - 1)  # exclude background
        results["Total Area (px²)"].append(total_area)
        results["Average Size (px²)"].append(avg_size)
        results["Area %"].append(area_percentage)
    
    return results

def print_results(results):
    # Print header
    print(f"{'Image':<10} | {'Particles':<10} | {'Total Area':<12} | {'Avg Size':<10} | {'Area %':<8}")
    print("-" * 65)
    
    # Print each row
    for i in range(len(results["Image"])):
        print(f"{results['Image'][i]:<10} | "
              f"{results['Number of Particles'][i]:<10} | "
              f"{results['Total Area (px²)'][i]:<12.2f} | "
              f"{results['Average Size (px²)'][i]:<10.2f} | "
              f"{results['Area %'][i]:<8.2f}")

if __name__ == "__main__":
    results = analyze_sem_images()
    print_results(results)
    
    # Calculate and print summary statistics
    if results["Image"]:
        print("\nSummary Statistics:")
        print(f"Average Particles per Image: {np.mean(results['Number of Particles']):.2f}")
        print(f"Average Total Area: {np.mean(results['Total Area (px²)']):.2f} px²")
        print(f"Overall Average Particle Size: {np.mean(results['Average Size (px²)']):.2f} px²")
        print(f"Average Area Coverage: {np.mean(results['Area %']):.2f}%")
