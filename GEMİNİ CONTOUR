85% of storage used … If you run out, you can't create, edit, and upload files.
import cv2
import numpy as np
# from google.colab import files # Dosya yükleme kısmı kaldırıldı - CSV indirme için tekrar gerekli olabilir
import pandas as pd
import os # Dosya varlığını kontrol için os modülü eklendi

def analyze_sem_image(image_path, threshold_value=50):
    """
    Analyzes a black and white SEM image to quantify particles using contour method.

    Args:
        image_path (str): Path to the image file.
        threshold_value (int, optional): Threshold value for binarization. Defaults to 50.

    Returns:
        dict: A dictionary containing particle analysis results:
              {
                  "Number of Particles": int,
                  "Total Area (px²)": float,
                  "Average Size (px²)": float,
                  "Area %": float
              }
    """
    # Resmi gri tonlamalı olarak oku
    img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

    if img is None:
        return {"error": "Resim okunamadı. Lütfen dosya yolunu ve resmin varlığını kontrol edin."}

    # Eşikleme (threshold) uygula
    _, thresh = cv2.threshold(img, threshold_value, 255, cv2.THRESH_BINARY_INV)

    # Konturları bul
    contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    particle_areas = []
    for contour in contours:
        area = cv2.contourArea(contour)
        # if area > 0:  # BU SATIR ÇIKARTILDI! Küçük gürültü konturlarını filtrelemek için (opsiyonel)
        particle_areas.append(area)

    num_particles = len(particle_areas)
    total_area = sum(particle_areas)
    average_size = total_area / num_particles if num_particles > 0 else 0
    image_area = img.shape[0] * img.shape[1]  # Görüntü alanını hesapla
    area_percentage = (total_area / image_area) * 100 if image_area > 0 else 0

    return {
        "Number of Particles": num_particles,
        "Total Area (px²)": total_area,
        "Average Size (px²)": average_size,
        "Area %": area_percentage
    }

# Ana kod kısmı
if __name__ == "__main__":
    file_names = [f"{i}.png" for i in range(1, 26)] # Resim dosyalarının isim listesi

    image_paths = file_names
    results_list = []

    for image_path in image_paths:
        if not os.path.exists(image_path): # Dosyanın varlığını kontrol et
            print(f"\nHata: Resim dosyası bulunamadı: {image_path}. Lütfen dosyaların Colab ortamında yüklü olduğundan emin olun.")
            results_list.append({"Image Name": image_path, "Error": "Dosya bulunamadı"})
            continue # Bir sonraki resme geç

        print(f"\nAnaliz ediliyor: {image_path}")
        analysis_result = analyze_sem_image(image_path, threshold_value=50)

        if "error" in analysis_result:
            print(f"Hata: {image_path} - {analysis_result['error']}")
            results_list.append({"Image Name": image_path, "Error": analysis_result["error"]})
        else:
            print(f"Parçacık Sayısı: {analysis_result['Number of Particles']}")
            print(f"Toplam Alan (px²): {analysis_result['Total Area (px²)']:.2f}")
            print(f"Ortalama Boyut (px²): {analysis_result['Average Size (px²)']:.2f}")
            print(f"Alan %: {analysis_result['Area %']:.2f}%")
            results_list.append({"Image Name": image_path, **analysis_result}) # Sonuçları listeye ekle

    # Pandas DataFrame oluştur ve sonuçları göster
    df_results = pd.DataFrame(results_list)
    print("\n--- Tüm Resimlerin Analiz Sonuçları ---")
    print(df_results)

    # Sonuçları CSV dosyasına kaydetme (AKTİF HALE GETİRİLDİ)
    csv_file_name = "sem_image_analysis_results.csv"
    df_results.to_csv(csv_file_name, index=False)

    from google.colab import files # CSV indirme için import eklendi
    files.download(csv_file_name) # Colab'dan indirme linki oluşturur, CSV dosyasını indirir
